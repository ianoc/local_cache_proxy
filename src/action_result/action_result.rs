// This file is generated by rust-protobuf 2.0.2. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Directory {
    // message fields
    pub files: ::protobuf::RepeatedField<FileNode>,
    pub directories: ::protobuf::RepeatedField<DirectoryNode>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Directory {
    pub fn new() -> Directory {
        ::std::default::Default::default()
    }

    // repeated .google.devtools.remoteexecution.v1test.FileNode files = 1;

    pub fn clear_files(&mut self) {
        self.files.clear();
    }

    // Param is passed by value, moved
    pub fn set_files(&mut self, v: ::protobuf::RepeatedField<FileNode>) {
        self.files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_files(&mut self) -> &mut ::protobuf::RepeatedField<FileNode> {
        &mut self.files
    }

    // Take field
    pub fn take_files(&mut self) -> ::protobuf::RepeatedField<FileNode> {
        ::std::mem::replace(&mut self.files, ::protobuf::RepeatedField::new())
    }

    pub fn get_files(&self) -> &[FileNode] {
        &self.files
    }

    // repeated .google.devtools.remoteexecution.v1test.DirectoryNode directories = 2;

    pub fn clear_directories(&mut self) {
        self.directories.clear();
    }

    // Param is passed by value, moved
    pub fn set_directories(&mut self, v: ::protobuf::RepeatedField<DirectoryNode>) {
        self.directories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_directories(&mut self) -> &mut ::protobuf::RepeatedField<DirectoryNode> {
        &mut self.directories
    }

    // Take field
    pub fn take_directories(&mut self) -> ::protobuf::RepeatedField<DirectoryNode> {
        ::std::mem::replace(&mut self.directories, ::protobuf::RepeatedField::new())
    }

    pub fn get_directories(&self) -> &[DirectoryNode] {
        &self.directories
    }
}

impl ::protobuf::Message for Directory {
    fn is_initialized(&self) -> bool {
        for v in &self.files {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.directories {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.files)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.directories)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.directories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.files {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.directories {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Directory {
        Directory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FileNode>>(
                    "files",
                    |m: &Directory| { &m.files },
                    |m: &mut Directory| { &mut m.files },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<DirectoryNode>>(
                    "directories",
                    |m: &Directory| { &m.directories },
                    |m: &mut Directory| { &mut m.directories },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Directory>(
                    "Directory",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Directory {
        static mut instance: ::protobuf::lazy::Lazy<Directory> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Directory,
        };
        unsafe {
            instance.get(Directory::new)
        }
    }
}

impl ::protobuf::Clear for Directory {
    fn clear(&mut self) {
        self.clear_files();
        self.clear_directories();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Directory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Directory {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FileNode {
    // message fields
    pub name: ::std::string::String,
    pub digest: ::protobuf::SingularPtrField<Digest>,
    pub is_executable: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl FileNode {
    pub fn new() -> FileNode {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // .google.devtools.remoteexecution.v1test.Digest digest = 2;

    pub fn clear_digest(&mut self) {
        self.digest.clear();
    }

    pub fn has_digest(&self) -> bool {
        self.digest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: Digest) {
        self.digest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut Digest {
        if self.digest.is_none() {
            self.digest.set_default();
        }
        self.digest.as_mut().unwrap()
    }

    // Take field
    pub fn take_digest(&mut self) -> Digest {
        self.digest.take().unwrap_or_else(|| Digest::new())
    }

    pub fn get_digest(&self) -> &Digest {
        self.digest.as_ref().unwrap_or_else(|| Digest::default_instance())
    }

    // bool is_executable = 4;

    pub fn clear_is_executable(&mut self) {
        self.is_executable = false;
    }

    // Param is passed by value, moved
    pub fn set_is_executable(&mut self, v: bool) {
        self.is_executable = v;
    }

    pub fn get_is_executable(&self) -> bool {
        self.is_executable
    }
}

impl ::protobuf::Message for FileNode {
    fn is_initialized(&self) -> bool {
        for v in &self.digest {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.digest)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_executable = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.digest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.is_executable != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.digest.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.is_executable != false {
            os.write_bool(4, self.is_executable)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FileNode {
        FileNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &FileNode| { &m.name },
                    |m: &mut FileNode| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Digest>>(
                    "digest",
                    |m: &FileNode| { &m.digest },
                    |m: &mut FileNode| { &mut m.digest },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_executable",
                    |m: &FileNode| { &m.is_executable },
                    |m: &mut FileNode| { &mut m.is_executable },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<FileNode>(
                    "FileNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static FileNode {
        static mut instance: ::protobuf::lazy::Lazy<FileNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const FileNode,
        };
        unsafe {
            instance.get(FileNode::new)
        }
    }
}

impl ::protobuf::Clear for FileNode {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_digest();
        self.clear_is_executable();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FileNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FileNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DirectoryNode {
    // message fields
    pub name: ::std::string::String,
    pub digest: ::protobuf::SingularPtrField<Digest>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl DirectoryNode {
    pub fn new() -> DirectoryNode {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // .google.devtools.remoteexecution.v1test.Digest digest = 2;

    pub fn clear_digest(&mut self) {
        self.digest.clear();
    }

    pub fn has_digest(&self) -> bool {
        self.digest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: Digest) {
        self.digest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut Digest {
        if self.digest.is_none() {
            self.digest.set_default();
        }
        self.digest.as_mut().unwrap()
    }

    // Take field
    pub fn take_digest(&mut self) -> Digest {
        self.digest.take().unwrap_or_else(|| Digest::new())
    }

    pub fn get_digest(&self) -> &Digest {
        self.digest.as_ref().unwrap_or_else(|| Digest::default_instance())
    }
}

impl ::protobuf::Message for DirectoryNode {
    fn is_initialized(&self) -> bool {
        for v in &self.digest {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.digest)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if let Some(ref v) = self.digest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if let Some(ref v) = self.digest.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DirectoryNode {
        DirectoryNode::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &DirectoryNode| { &m.name },
                    |m: &mut DirectoryNode| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Digest>>(
                    "digest",
                    |m: &DirectoryNode| { &m.digest },
                    |m: &mut DirectoryNode| { &mut m.digest },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DirectoryNode>(
                    "DirectoryNode",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DirectoryNode {
        static mut instance: ::protobuf::lazy::Lazy<DirectoryNode> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DirectoryNode,
        };
        unsafe {
            instance.get(DirectoryNode::new)
        }
    }
}

impl ::protobuf::Clear for DirectoryNode {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_digest();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DirectoryNode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DirectoryNode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Digest {
    // message fields
    pub hash: ::std::string::String,
    pub size_bytes: i64,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Digest {
    pub fn new() -> Digest {
        ::std::default::Default::default()
    }

    // string hash = 1;

    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::string::String) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::string::String {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hash, ::std::string::String::new())
    }

    pub fn get_hash(&self) -> &str {
        &self.hash
    }

    // int64 size_bytes = 2;

    pub fn clear_size_bytes(&mut self) {
        self.size_bytes = 0;
    }

    // Param is passed by value, moved
    pub fn set_size_bytes(&mut self, v: i64) {
        self.size_bytes = v;
    }

    pub fn get_size_bytes(&self) -> i64 {
        self.size_bytes
    }
}

impl ::protobuf::Message for Digest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.size_bytes = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        if self.size_bytes != 0 {
            my_size += ::protobuf::rt::value_size(2, self.size_bytes, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        if self.size_bytes != 0 {
            os.write_int64(2, self.size_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Digest {
        Digest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "hash",
                    |m: &Digest| { &m.hash },
                    |m: &mut Digest| { &mut m.hash },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "size_bytes",
                    |m: &Digest| { &m.size_bytes },
                    |m: &mut Digest| { &mut m.size_bytes },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Digest>(
                    "Digest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Digest {
        static mut instance: ::protobuf::lazy::Lazy<Digest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Digest,
        };
        unsafe {
            instance.get(Digest::new)
        }
    }
}

impl ::protobuf::Clear for Digest {
    fn clear(&mut self) {
        self.clear_hash();
        self.clear_size_bytes();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Digest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Digest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActionResult {
    // message fields
    pub output_files: ::protobuf::RepeatedField<OutputFile>,
    pub output_directories: ::protobuf::RepeatedField<OutputDirectory>,
    pub exit_code: i32,
    pub stdout_raw: ::std::vec::Vec<u8>,
    pub stdout_digest: ::protobuf::SingularPtrField<Digest>,
    pub stderr_raw: ::std::vec::Vec<u8>,
    pub stderr_digest: ::protobuf::SingularPtrField<Digest>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ActionResult {
    pub fn new() -> ActionResult {
        ::std::default::Default::default()
    }

    // repeated .google.devtools.remoteexecution.v1test.OutputFile output_files = 2;

    pub fn clear_output_files(&mut self) {
        self.output_files.clear();
    }

    // Param is passed by value, moved
    pub fn set_output_files(&mut self, v: ::protobuf::RepeatedField<OutputFile>) {
        self.output_files = v;
    }

    // Mutable pointer to the field.
    pub fn mut_output_files(&mut self) -> &mut ::protobuf::RepeatedField<OutputFile> {
        &mut self.output_files
    }

    // Take field
    pub fn take_output_files(&mut self) -> ::protobuf::RepeatedField<OutputFile> {
        ::std::mem::replace(&mut self.output_files, ::protobuf::RepeatedField::new())
    }

    pub fn get_output_files(&self) -> &[OutputFile] {
        &self.output_files
    }

    // repeated .google.devtools.remoteexecution.v1test.OutputDirectory output_directories = 3;

    pub fn clear_output_directories(&mut self) {
        self.output_directories.clear();
    }

    // Param is passed by value, moved
    pub fn set_output_directories(&mut self, v: ::protobuf::RepeatedField<OutputDirectory>) {
        self.output_directories = v;
    }

    // Mutable pointer to the field.
    pub fn mut_output_directories(&mut self) -> &mut ::protobuf::RepeatedField<OutputDirectory> {
        &mut self.output_directories
    }

    // Take field
    pub fn take_output_directories(&mut self) -> ::protobuf::RepeatedField<OutputDirectory> {
        ::std::mem::replace(&mut self.output_directories, ::protobuf::RepeatedField::new())
    }

    pub fn get_output_directories(&self) -> &[OutputDirectory] {
        &self.output_directories
    }

    // int32 exit_code = 4;

    pub fn clear_exit_code(&mut self) {
        self.exit_code = 0;
    }

    // Param is passed by value, moved
    pub fn set_exit_code(&mut self, v: i32) {
        self.exit_code = v;
    }

    pub fn get_exit_code(&self) -> i32 {
        self.exit_code
    }

    // bytes stdout_raw = 5;

    pub fn clear_stdout_raw(&mut self) {
        self.stdout_raw.clear();
    }

    // Param is passed by value, moved
    pub fn set_stdout_raw(&mut self, v: ::std::vec::Vec<u8>) {
        self.stdout_raw = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stdout_raw(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.stdout_raw
    }

    // Take field
    pub fn take_stdout_raw(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.stdout_raw, ::std::vec::Vec::new())
    }

    pub fn get_stdout_raw(&self) -> &[u8] {
        &self.stdout_raw
    }

    // .google.devtools.remoteexecution.v1test.Digest stdout_digest = 6;

    pub fn clear_stdout_digest(&mut self) {
        self.stdout_digest.clear();
    }

    pub fn has_stdout_digest(&self) -> bool {
        self.stdout_digest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stdout_digest(&mut self, v: Digest) {
        self.stdout_digest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stdout_digest(&mut self) -> &mut Digest {
        if self.stdout_digest.is_none() {
            self.stdout_digest.set_default();
        }
        self.stdout_digest.as_mut().unwrap()
    }

    // Take field
    pub fn take_stdout_digest(&mut self) -> Digest {
        self.stdout_digest.take().unwrap_or_else(|| Digest::new())
    }

    pub fn get_stdout_digest(&self) -> &Digest {
        self.stdout_digest.as_ref().unwrap_or_else(|| Digest::default_instance())
    }

    // bytes stderr_raw = 7;

    pub fn clear_stderr_raw(&mut self) {
        self.stderr_raw.clear();
    }

    // Param is passed by value, moved
    pub fn set_stderr_raw(&mut self, v: ::std::vec::Vec<u8>) {
        self.stderr_raw = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stderr_raw(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.stderr_raw
    }

    // Take field
    pub fn take_stderr_raw(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.stderr_raw, ::std::vec::Vec::new())
    }

    pub fn get_stderr_raw(&self) -> &[u8] {
        &self.stderr_raw
    }

    // .google.devtools.remoteexecution.v1test.Digest stderr_digest = 8;

    pub fn clear_stderr_digest(&mut self) {
        self.stderr_digest.clear();
    }

    pub fn has_stderr_digest(&self) -> bool {
        self.stderr_digest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_stderr_digest(&mut self, v: Digest) {
        self.stderr_digest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_stderr_digest(&mut self) -> &mut Digest {
        if self.stderr_digest.is_none() {
            self.stderr_digest.set_default();
        }
        self.stderr_digest.as_mut().unwrap()
    }

    // Take field
    pub fn take_stderr_digest(&mut self) -> Digest {
        self.stderr_digest.take().unwrap_or_else(|| Digest::new())
    }

    pub fn get_stderr_digest(&self) -> &Digest {
        self.stderr_digest.as_ref().unwrap_or_else(|| Digest::default_instance())
    }
}

impl ::protobuf::Message for ActionResult {
    fn is_initialized(&self) -> bool {
        for v in &self.output_files {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.output_directories {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stdout_digest {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.stderr_digest {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.output_files)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.output_directories)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.exit_code = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.stdout_raw)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stdout_digest)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.stderr_raw)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.stderr_digest)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.output_files {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.output_directories {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.exit_code != 0 {
            my_size += ::protobuf::rt::value_size(4, self.exit_code, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.stdout_raw.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.stdout_raw);
        }
        if let Some(ref v) = self.stdout_digest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.stderr_raw.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.stderr_raw);
        }
        if let Some(ref v) = self.stderr_digest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.output_files {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.output_directories {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.exit_code != 0 {
            os.write_int32(4, self.exit_code)?;
        }
        if !self.stdout_raw.is_empty() {
            os.write_bytes(5, &self.stdout_raw)?;
        }
        if let Some(ref v) = self.stdout_digest.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.stderr_raw.is_empty() {
            os.write_bytes(7, &self.stderr_raw)?;
        }
        if let Some(ref v) = self.stderr_digest.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActionResult {
        ActionResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OutputFile>>(
                    "output_files",
                    |m: &ActionResult| { &m.output_files },
                    |m: &mut ActionResult| { &mut m.output_files },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<OutputDirectory>>(
                    "output_directories",
                    |m: &ActionResult| { &m.output_directories },
                    |m: &mut ActionResult| { &mut m.output_directories },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "exit_code",
                    |m: &ActionResult| { &m.exit_code },
                    |m: &mut ActionResult| { &mut m.exit_code },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "stdout_raw",
                    |m: &ActionResult| { &m.stdout_raw },
                    |m: &mut ActionResult| { &mut m.stdout_raw },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Digest>>(
                    "stdout_digest",
                    |m: &ActionResult| { &m.stdout_digest },
                    |m: &mut ActionResult| { &mut m.stdout_digest },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "stderr_raw",
                    |m: &ActionResult| { &m.stderr_raw },
                    |m: &mut ActionResult| { &mut m.stderr_raw },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Digest>>(
                    "stderr_digest",
                    |m: &ActionResult| { &m.stderr_digest },
                    |m: &mut ActionResult| { &mut m.stderr_digest },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ActionResult>(
                    "ActionResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ActionResult {
        static mut instance: ::protobuf::lazy::Lazy<ActionResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ActionResult,
        };
        unsafe {
            instance.get(ActionResult::new)
        }
    }
}

impl ::protobuf::Clear for ActionResult {
    fn clear(&mut self) {
        self.clear_output_files();
        self.clear_output_directories();
        self.clear_exit_code();
        self.clear_stdout_raw();
        self.clear_stdout_digest();
        self.clear_stderr_raw();
        self.clear_stderr_digest();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActionResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActionResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutputFile {
    // message fields
    pub path: ::std::string::String,
    pub digest: ::protobuf::SingularPtrField<Digest>,
    pub content: ::std::vec::Vec<u8>,
    pub is_executable: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl OutputFile {
    pub fn new() -> OutputFile {
        ::std::default::Default::default()
    }

    // string path = 1;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    pub fn get_path(&self) -> &str {
        &self.path
    }

    // .google.devtools.remoteexecution.v1test.Digest digest = 2;

    pub fn clear_digest(&mut self) {
        self.digest.clear();
    }

    pub fn has_digest(&self) -> bool {
        self.digest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: Digest) {
        self.digest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut Digest {
        if self.digest.is_none() {
            self.digest.set_default();
        }
        self.digest.as_mut().unwrap()
    }

    // Take field
    pub fn take_digest(&mut self) -> Digest {
        self.digest.take().unwrap_or_else(|| Digest::new())
    }

    pub fn get_digest(&self) -> &Digest {
        self.digest.as_ref().unwrap_or_else(|| Digest::default_instance())
    }

    // bytes content = 3;

    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::vec::Vec<u8>) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.content, ::std::vec::Vec::new())
    }

    pub fn get_content(&self) -> &[u8] {
        &self.content
    }

    // bool is_executable = 4;

    pub fn clear_is_executable(&mut self) {
        self.is_executable = false;
    }

    // Param is passed by value, moved
    pub fn set_is_executable(&mut self, v: bool) {
        self.is_executable = v;
    }

    pub fn get_is_executable(&self) -> bool {
        self.is_executable
    }
}

impl ::protobuf::Message for OutputFile {
    fn is_initialized(&self) -> bool {
        for v in &self.digest {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.digest)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.content)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_executable = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if let Some(ref v) = self.digest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.content);
        }
        if self.is_executable != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if let Some(ref v) = self.digest.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.content.is_empty() {
            os.write_bytes(3, &self.content)?;
        }
        if self.is_executable != false {
            os.write_bool(4, self.is_executable)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputFile {
        OutputFile::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &OutputFile| { &m.path },
                    |m: &mut OutputFile| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Digest>>(
                    "digest",
                    |m: &OutputFile| { &m.digest },
                    |m: &mut OutputFile| { &mut m.digest },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "content",
                    |m: &OutputFile| { &m.content },
                    |m: &mut OutputFile| { &mut m.content },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_executable",
                    |m: &OutputFile| { &m.is_executable },
                    |m: &mut OutputFile| { &mut m.is_executable },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutputFile>(
                    "OutputFile",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OutputFile {
        static mut instance: ::protobuf::lazy::Lazy<OutputFile> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OutputFile,
        };
        unsafe {
            instance.get(OutputFile::new)
        }
    }
}

impl ::protobuf::Clear for OutputFile {
    fn clear(&mut self) {
        self.clear_path();
        self.clear_digest();
        self.clear_content();
        self.clear_is_executable();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputFile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputFile {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct OutputDirectory {
    // message fields
    pub path: ::std::string::String,
    pub digest: ::protobuf::SingularPtrField<Digest>,
    pub tree_digest: ::protobuf::SingularPtrField<Digest>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl OutputDirectory {
    pub fn new() -> OutputDirectory {
        ::std::default::Default::default()
    }

    // string path = 1;

    pub fn clear_path(&mut self) {
        self.path.clear();
    }

    // Param is passed by value, moved
    pub fn set_path(&mut self, v: ::std::string::String) {
        self.path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_path(&mut self) -> &mut ::std::string::String {
        &mut self.path
    }

    // Take field
    pub fn take_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.path, ::std::string::String::new())
    }

    pub fn get_path(&self) -> &str {
        &self.path
    }

    // .google.devtools.remoteexecution.v1test.Digest digest = 2;

    pub fn clear_digest(&mut self) {
        self.digest.clear();
    }

    pub fn has_digest(&self) -> bool {
        self.digest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_digest(&mut self, v: Digest) {
        self.digest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_digest(&mut self) -> &mut Digest {
        if self.digest.is_none() {
            self.digest.set_default();
        }
        self.digest.as_mut().unwrap()
    }

    // Take field
    pub fn take_digest(&mut self) -> Digest {
        self.digest.take().unwrap_or_else(|| Digest::new())
    }

    pub fn get_digest(&self) -> &Digest {
        self.digest.as_ref().unwrap_or_else(|| Digest::default_instance())
    }

    // .google.devtools.remoteexecution.v1test.Digest tree_digest = 3;

    pub fn clear_tree_digest(&mut self) {
        self.tree_digest.clear();
    }

    pub fn has_tree_digest(&self) -> bool {
        self.tree_digest.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tree_digest(&mut self, v: Digest) {
        self.tree_digest = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tree_digest(&mut self) -> &mut Digest {
        if self.tree_digest.is_none() {
            self.tree_digest.set_default();
        }
        self.tree_digest.as_mut().unwrap()
    }

    // Take field
    pub fn take_tree_digest(&mut self) -> Digest {
        self.tree_digest.take().unwrap_or_else(|| Digest::new())
    }

    pub fn get_tree_digest(&self) -> &Digest {
        self.tree_digest.as_ref().unwrap_or_else(|| Digest::default_instance())
    }
}

impl ::protobuf::Message for OutputDirectory {
    fn is_initialized(&self) -> bool {
        for v in &self.digest {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.tree_digest {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.path)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.digest)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tree_digest)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.path);
        }
        if let Some(ref v) = self.digest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.tree_digest.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.path.is_empty() {
            os.write_string(1, &self.path)?;
        }
        if let Some(ref v) = self.digest.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.tree_digest.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OutputDirectory {
        OutputDirectory::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "path",
                    |m: &OutputDirectory| { &m.path },
                    |m: &mut OutputDirectory| { &mut m.path },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Digest>>(
                    "digest",
                    |m: &OutputDirectory| { &m.digest },
                    |m: &mut OutputDirectory| { &mut m.digest },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Digest>>(
                    "tree_digest",
                    |m: &OutputDirectory| { &m.tree_digest },
                    |m: &mut OutputDirectory| { &mut m.tree_digest },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<OutputDirectory>(
                    "OutputDirectory",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static OutputDirectory {
        static mut instance: ::protobuf::lazy::Lazy<OutputDirectory> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const OutputDirectory,
        };
        unsafe {
            instance.get(OutputDirectory::new)
        }
    }
}

impl ::protobuf::Clear for OutputDirectory {
    fn clear(&mut self) {
        self.clear_path();
        self.clear_digest();
        self.clear_tree_digest();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OutputDirectory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OutputDirectory {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dsrc/proto/action_result.proto\x12&google.devtools.remoteexecution.\
    v1test\"\xac\x01\n\tDirectory\x12F\n\x05files\x18\x01\x20\x03(\x0b20.goo\
    gle.devtools.remoteexecution.v1test.FileNodeR\x05files\x12W\n\x0bdirecto\
    ries\x18\x02\x20\x03(\x0b25.google.devtools.remoteexecution.v1test.Direc\
    toryNodeR\x0bdirectories\"\x8b\x01\n\x08FileNode\x12\x12\n\x04name\x18\
    \x01\x20\x01(\tR\x04name\x12F\n\x06digest\x18\x02\x20\x01(\x0b2..google.\
    devtools.remoteexecution.v1test.DigestR\x06digest\x12#\n\ris_executable\
    \x18\x04\x20\x01(\x08R\x0cisExecutable\"k\n\rDirectoryNode\x12\x12\n\x04\
    name\x18\x01\x20\x01(\tR\x04name\x12F\n\x06digest\x18\x02\x20\x01(\x0b2.\
    .google.devtools.remoteexecution.v1test.DigestR\x06digest\";\n\x06Digest\
    \x12\x12\n\x04hash\x18\x01\x20\x01(\tR\x04hash\x12\x1d\n\nsize_bytes\x18\
    \x02\x20\x01(\x03R\tsizeBytes\"\xd2\x03\n\x0cActionResult\x12U\n\x0coutp\
    ut_files\x18\x02\x20\x03(\x0b22.google.devtools.remoteexecution.v1test.O\
    utputFileR\x0boutputFiles\x12f\n\x12output_directories\x18\x03\x20\x03(\
    \x0b27.google.devtools.remoteexecution.v1test.OutputDirectoryR\x11output\
    Directories\x12\x1b\n\texit_code\x18\x04\x20\x01(\x05R\x08exitCode\x12\
    \x1d\n\nstdout_raw\x18\x05\x20\x01(\x0cR\tstdoutRaw\x12S\n\rstdout_diges\
    t\x18\x06\x20\x01(\x0b2..google.devtools.remoteexecution.v1test.DigestR\
    \x0cstdoutDigest\x12\x1d\n\nstderr_raw\x18\x07\x20\x01(\x0cR\tstderrRaw\
    \x12S\n\rstderr_digest\x18\x08\x20\x01(\x0b2..google.devtools.remoteexec\
    ution.v1test.DigestR\x0cstderrDigest\"\xa7\x01\n\nOutputFile\x12\x12\n\
    \x04path\x18\x01\x20\x01(\tR\x04path\x12F\n\x06digest\x18\x02\x20\x01(\
    \x0b2..google.devtools.remoteexecution.v1test.DigestR\x06digest\x12\x18\
    \n\x07content\x18\x03\x20\x01(\x0cR\x07content\x12#\n\ris_executable\x18\
    \x04\x20\x01(\x08R\x0cisExecutable\"\xbe\x01\n\x0fOutputDirectory\x12\
    \x12\n\x04path\x18\x01\x20\x01(\tR\x04path\x12F\n\x06digest\x18\x02\x20\
    \x01(\x0b2..google.devtools.remoteexecution.v1test.DigestR\x06digest\x12\
    O\n\x0btree_digest\x18\x03\x20\x01(\x0b2..google.devtools.remoteexecutio\
    n.v1test.DigestR\ntreeDigestJ\xb7_\n\x07\x12\x05\x11\0\xb5\x02\x01\n\x85\
    \x06\n\x01\x0c\x12\x03\x11\0\x122\xb2\x04\x20Copyright\x202017\x20Google\
    \x20Inc.\n\n\x20Licensed\x20under\x20the\x20Apache\x20License,\x20Versio\
    n\x202.0\x20(the\x20\"License\");\n\x20you\x20may\x20not\x20use\x20this\
    \x20file\x20except\x20in\x20compliance\x20with\x20the\x20License.\n\x20Y\
    ou\x20may\x20obtain\x20a\x20copy\x20of\x20the\x20License\x20at\n\n\x20\
    \x20\x20\x20\x20http://www.apache.org/licenses/LICENSE-2.0\n\n\x20Unless\
    \x20required\x20by\x20applicable\x20law\x20or\x20agreed\x20to\x20in\x20w\
    riting,\x20software\n\x20distributed\x20under\x20the\x20License\x20is\
    \x20distributed\x20on\x20an\x20\"AS\x20IS\"\x20BASIS,\n\x20WITHOUT\x20WA\
    RRANTIES\x20OR\x20CONDITIONS\x20OF\x20ANY\x20KIND,\x20either\x20express\
    \x20or\x20implied.\n\x20See\x20the\x20License\x20for\x20the\x20specific\
    \x20language\x20governing\x20permissions\x20and\n\x20limitations\x20unde\
    r\x20the\x20License.\n2\xc5\x01\x20This\x20is\x20a\x20minified\x20versio\
    n\x20of\x20the\x20google\x20Action\x20Result\x20protobuf\x20from:\n\x20h\
    ttps://raw.githubusercontent.com/googleapis/googleapis/master/google/dev\
    tools/remoteexecution/v1test/remote_execution.proto\n\n\x08\n\x01\x02\
    \x12\x03\x13\x08.\n\xf0\r\n\x02\x04\0\x12\x04R\0X\x01\x1a\xe3\r\x20A\x20\
    `Directory`\x20represents\x20a\x20directory\x20node\x20in\x20a\x20file\
    \x20tree,\x20containing\x20zero\x20or\n\x20more\x20children\x20[FileNode\
    s][google.devtools.remoteexecution.v1test.FileNode]\n\x20and\x20[Directo\
    ryNodes][google.devtools.remoteexecution.v1test.DirectoryNode].\n\x20Eac\
    h\x20`Node`\x20contains\x20its\x20name\x20in\x20the\x20directory,\x20the\
    \x20digest\x20of\x20its\x20content\n\x20(either\x20a\x20file\x20blob\x20\
    or\x20a\x20`Directory`\x20proto),\x20as\x20well\x20as\x20possibly\x20som\
    e\n\x20metadata\x20about\x20the\x20file\x20or\x20directory.\n\n\x20In\
    \x20order\x20to\x20ensure\x20that\x20two\x20equivalent\x20directory\x20t\
    rees\x20hash\x20to\x20the\x20same\n\x20value,\x20the\x20following\x20res\
    trictions\x20MUST\x20be\x20obeyed\x20when\x20constructing\x20a\n\x20a\
    \x20`Directory`:\n\x20\x20\x20-\x20Every\x20child\x20in\x20the\x20direct\
    ory\x20must\x20have\x20a\x20path\x20of\x20exactly\x20one\x20segment.\n\
    \x20\x20\x20\x20\x20Multiple\x20levels\x20of\x20directory\x20hierarchy\
    \x20may\x20not\x20be\x20collapsed.\n\x20\x20\x20-\x20Each\x20child\x20in\
    \x20the\x20directory\x20must\x20have\x20a\x20unique\x20path\x20segment\
    \x20(file\x20name).\n\x20\x20\x20-\x20The\x20files\x20and\x20directories\
    \x20in\x20the\x20directory\x20must\x20each\x20be\x20sorted\x20in\n\x20\
    \x20\x20\x20\x20lexicographical\x20order\x20by\x20path.\x20The\x20path\
    \x20strings\x20must\x20be\x20sorted\x20by\x20code\n\x20\x20\x20\x20\x20p\
    oint,\x20equivalently,\x20by\x20UTF-8\x20bytes.\n\n\x20A\x20`Directory`\
    \x20that\x20obeys\x20the\x20restrictions\x20is\x20said\x20to\x20be\x20in\
    \x20canonical\x20form.\n\n\x20As\x20an\x20example,\x20the\x20following\
    \x20could\x20be\x20used\x20for\x20a\x20file\x20named\x20`bar`\x20and\x20\
    a\n\x20directory\x20named\x20`foo`\x20with\x20an\x20executable\x20file\
    \x20named\x20`baz`\x20(hashes\x20shortened\n\x20for\x20readability):\n\n\
    \x20```json\n\x20//\x20(Directory\x20proto)\n\x20{\n\x20\x20\x20files:\
    \x20[\n\x20\x20\x20\x20\x20{\n\x20\x20\x20\x20\x20\x20\x20name:\x20\"bar\
    \",\n\x20\x20\x20\x20\x20\x20\x20digest:\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20hash:\x20\"4a73bc9d03...\",\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20size:\x2065534\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\
    \x20}\n\x20\x20\x20],\n\x20\x20\x20directories:\x20[\n\x20\x20\x20\x20\
    \x20{\n\x20\x20\x20\x20\x20\x20\x20name:\x20\"foo\",\n\x20\x20\x20\x20\
    \x20\x20\x20digest:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20hash:\x20\
    \"4cf2eda940...\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20size:\x2043\n\
    \x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20}\n\x20\x20\x20]\n\
    \x20}\n\n\x20//\x20(Directory\x20proto\x20with\x20hash\x20\"4cf2eda940..\
    .\"\x20and\x20size\x2043)\n\x20{\n\x20\x20\x20files:\x20[\n\x20\x20\x20\
    \x20\x20{\n\x20\x20\x20\x20\x20\x20\x20name:\x20\"baz\",\n\x20\x20\x20\
    \x20\x20\x20\x20digest:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20hash:\
    \x20\"b2c941073e...\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20size:\x20129\
    4,\n\x20\x20\x20\x20\x20\x20\x20},\n\x20\x20\x20\x20\x20\x20\x20is_execu\
    table:\x20true\n\x20\x20\x20\x20\x20}\n\x20\x20\x20]\n\x20}\n\x20```\n\n\
    \n\n\x03\x04\0\x01\x12\x03R\x08\x11\n*\n\x04\x04\0\x02\0\x12\x03T\x02\
    \x1e\x1a\x1d\x20The\x20files\x20in\x20the\x20directory.\n\n\x0c\n\x05\
    \x04\0\x02\0\x04\x12\x03T\x02\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03T\x0b\
    \x13\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03T\x14\x19\n\x0c\n\x05\x04\0\x02\
    \0\x03\x12\x03T\x1c\x1d\n3\n\x04\x04\0\x02\x01\x12\x03W\x02)\x1a&\x20The\
    \x20subdirectories\x20in\x20the\x20directory.\n\n\x0c\n\x05\x04\0\x02\
    \x01\x04\x12\x03W\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03W\x0b\x18\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03W\x19$\n\x0c\n\x05\x04\0\x02\x01\x03\
    \x12\x03W'(\nL\n\x02\x04\x01\x12\x04[\0d\x01\x1a@\x20A\x20`FileNode`\x20\
    represents\x20a\x20single\x20file\x20and\x20associated\x20metadata.\n\n\
    \n\n\x03\x04\x01\x01\x12\x03[\x08\x10\n$\n\x04\x04\x01\x02\0\x12\x03]\
    \x02\x12\x1a\x17\x20The\x20name\x20of\x20the\x20file.\n\n\r\n\x05\x04\
    \x01\x02\0\x04\x12\x04]\x02[\x12\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03]\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03]\t\r\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03]\x10\x11\n0\n\x04\x04\x01\x02\x01\x12\x03`\x02\x14\
    \x1a#\x20The\x20digest\x20of\x20the\x20file's\x20content.\n\n\r\n\x05\
    \x04\x01\x02\x01\x04\x12\x04`\x02]\x12\n\x0c\n\x05\x04\x01\x02\x01\x06\
    \x12\x03`\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03`\t\x0f\n\x0c\n\
    \x05\x04\x01\x02\x01\x03\x12\x03`\x12\x13\n;\n\x04\x04\x01\x02\x02\x12\
    \x03c\x02\x19\x1a.\x20True\x20if\x20file\x20is\x20executable,\x20false\
    \x20otherwise.\n\n\r\n\x05\x04\x01\x02\x02\x04\x12\x04c\x02`\x14\n\x0c\n\
    \x05\x04\x01\x02\x02\x05\x12\x03c\x02\x06\n\x0c\n\x05\x04\x01\x02\x02\
    \x01\x12\x03c\x07\x14\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03c\x17\x18\n\
    \xb3\x01\n\x02\x04\x02\x12\x04i\0r\x01\x1a\xa6\x01\x20A\x20`DirectoryNod\
    e`\x20represents\x20a\x20child\x20of\x20a\n\x20[Directory][google.devtoo\
    ls.remoteexecution.v1test.Directory]\x20which\x20is\x20itself\n\x20a\x20\
    `Directory`\x20and\x20its\x20associated\x20metadata.\n\n\n\n\x03\x04\x02\
    \x01\x12\x03i\x08\x15\n)\n\x04\x04\x02\x02\0\x12\x03k\x02\x12\x1a\x1c\
    \x20The\x20name\x20of\x20the\x20directory.\n\n\r\n\x05\x04\x02\x02\0\x04\
    \x12\x04k\x02i\x17\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03k\x02\x08\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03k\t\r\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03k\x10\x11\n\xf3\x01\n\x04\x04\x02\x02\x01\x12\x03q\x02\x14\x1a\xe5\
    \x01\x20The\x20digest\x20of\x20the\n\x20[Directory][google.devtools.remo\
    teexecution.v1test.Directory]\x20object\n\x20represented.\x20See\x20[Dig\
    est][google.devtools.remoteexecution.v1test.Digest]\n\x20for\x20informat\
    ion\x20about\x20how\x20to\x20take\x20the\x20digest\x20of\x20a\x20proto\
    \x20message.\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04q\x02k\x12\n\x0c\n\
    \x05\x04\x02\x02\x01\x06\x12\x03q\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\
    \x01\x12\x03q\t\x0f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03q\x12\x13\n\
    \xb3\x0e\n\x02\x04\x03\x12\x06\x93\x01\0\x9a\x01\x01\x1a\xa4\x0e\x20A\
    \x20content\x20digest.\x20A\x20digest\x20for\x20a\x20given\x20blob\x20co\
    nsists\x20of\x20the\x20size\x20of\x20the\x20blob\n\x20and\x20its\x20hash\
    .\x20The\x20hash\x20algorithm\x20to\x20use\x20is\x20defined\x20by\x20the\
    \x20server,\x20but\x20servers\n\x20SHOULD\x20use\x20SHA-256.\n\n\x20The\
    \x20size\x20is\x20considered\x20to\x20be\x20an\x20integral\x20part\x20of\
    \x20the\x20digest\x20and\x20cannot\x20be\n\x20separated.\x20That\x20is,\
    \x20even\x20if\x20the\x20`hash`\x20field\x20is\x20correctly\x20specified\
    \x20but\n\x20`size_bytes`\x20is\x20not,\x20the\x20server\x20MUST\x20reje\
    ct\x20the\x20request.\n\n\x20The\x20reason\x20for\x20including\x20the\
    \x20size\x20in\x20the\x20digest\x20is\x20as\x20follows:\x20in\x20a\x20gr\
    eat\n\x20many\x20cases,\x20the\x20server\x20needs\x20to\x20know\x20the\
    \x20size\x20of\x20the\x20blob\x20it\x20is\x20about\x20to\x20work\n\x20wi\
    th\x20prior\x20to\x20starting\x20an\x20operation\x20with\x20it,\x20such\
    \x20as\x20flattening\x20Merkle\x20tree\n\x20structures\x20or\x20streamin\
    g\x20it\x20to\x20a\x20worker.\x20Technically,\x20the\x20server\x20could\
    \n\x20implement\x20a\x20separate\x20metadata\x20store,\x20but\x20this\
    \x20results\x20in\x20a\x20significantly\x20more\n\x20complicated\x20impl\
    ementation\x20as\x20opposed\x20to\x20having\x20the\x20client\x20specify\
    \x20the\x20size\n\x20up-front\x20(or\x20storing\x20the\x20size\x20along\
    \x20with\x20the\x20digest\x20in\x20every\x20message\x20where\n\x20digest\
    s\x20are\x20embedded).\x20This\x20does\x20mean\x20that\x20the\x20API\x20\
    leaks\x20some\x20implementation\n\x20details\x20of\x20(what\x20we\x20con\
    sider\x20to\x20be)\x20a\x20reasonable\x20server\x20implementation,\x20bu\
    t\n\x20we\x20consider\x20this\x20to\x20be\x20a\x20worthwhile\x20tradeoff\
    .\n\n\x20When\x20a\x20`Digest`\x20is\x20used\x20to\x20refer\x20to\x20a\
    \x20proto\x20message,\x20it\x20always\x20refers\x20to\x20the\n\x20messag\
    e\x20in\x20binary\x20encoded\x20form.\x20To\x20ensure\x20consistent\x20h\
    ashing,\x20clients\x20and\n\x20servers\x20MUST\x20ensure\x20that\x20they\
    \x20serialize\x20messages\x20according\x20to\x20the\x20following\n\x20ru\
    les,\x20even\x20if\x20there\x20are\x20alternate\x20valid\x20encodings\
    \x20for\x20the\x20same\x20message.\n\x20-\x20Fields\x20are\x20serialized\
    \x20in\x20tag\x20order.\n\x20-\x20There\x20are\x20no\x20unknown\x20field\
    s.\n\x20-\x20There\x20are\x20no\x20duplicate\x20fields.\n\x20-\x20Fields\
    \x20are\x20serialized\x20according\x20to\x20the\x20default\x20semantics\
    \x20for\x20their\x20type.\n\n\x20Most\x20protocol\x20buffer\x20implement\
    ations\x20will\x20always\x20follow\x20these\x20rules\x20when\n\x20serial\
    izing,\x20but\x20care\x20should\x20be\x20taken\x20to\x20avoid\x20shortcu\
    ts.\x20For\x20instance,\n\x20concatenating\x20two\x20messages\x20to\x20m\
    erge\x20them\x20may\x20produce\x20duplicate\x20fields.\n\n\x0b\n\x03\x04\
    \x03\x01\x12\x04\x93\x01\x08\x0e\nw\n\x04\x04\x03\x02\0\x12\x04\x96\x01\
    \x02\x12\x1ai\x20The\x20hash.\x20In\x20the\x20case\x20of\x20SHA-256,\x20\
    it\x20will\x20always\x20be\x20a\x20lowercase\x20hex\x20string\n\x20exact\
    ly\x2064\x20characters\x20long.\n\n\x0f\n\x05\x04\x03\x02\0\x04\x12\x06\
    \x96\x01\x02\x93\x01\x10\n\r\n\x05\x04\x03\x02\0\x05\x12\x04\x96\x01\x02\
    \x08\n\r\n\x05\x04\x03\x02\0\x01\x12\x04\x96\x01\t\r\n\r\n\x05\x04\x03\
    \x02\0\x03\x12\x04\x96\x01\x10\x11\n/\n\x04\x04\x03\x02\x01\x12\x04\x99\
    \x01\x02\x17\x1a!\x20The\x20size\x20of\x20the\x20blob,\x20in\x20bytes.\n\
    \n\x0f\n\x05\x04\x03\x02\x01\x04\x12\x06\x99\x01\x02\x96\x01\x12\n\r\n\
    \x05\x04\x03\x02\x01\x05\x12\x04\x99\x01\x02\x07\n\r\n\x05\x04\x03\x02\
    \x01\x01\x12\x04\x99\x01\x08\x12\n\r\n\x05\x04\x03\x02\x01\x03\x12\x04\
    \x99\x01\x15\x16\n\x7f\n\x02\x04\x04\x12\x06\x9e\x01\0\x83\x02\x01\x1aq\
    \x20An\x20ActionResult\x20represents\x20the\x20result\x20of\x20an\n\x20[\
    Action][google.devtools.remoteexecution.v1test.Action]\x20being\x20run.\
    \n\n\x0b\n\x03\x04\x04\x01\x12\x04\x9e\x01\x08\x14\n\x91\x04\n\x04\x04\
    \x04\x02\0\x12\x04\xa7\x01\x02'\x1a\x82\x04\x20The\x20output\x20files\
    \x20of\x20the\x20action.\x20For\x20each\x20output\x20file\x20requested\
    \x20in\x20the\n\x20`output_files`\x20field\x20of\x20the\x20Action,\x20if\
    \x20the\x20corresponding\x20file\x20existed\x20after\n\x20the\x20action\
    \x20completed,\x20a\x20single\x20entry\x20will\x20be\x20present\x20in\
    \x20the\x20output\x20list.\n\n\x20If\x20the\x20action\x20does\x20not\x20\
    produce\x20the\x20requested\x20output,\x20or\x20produces\x20a\n\x20direc\
    tory\x20where\x20a\x20regular\x20file\x20is\x20expected\x20or\x20vice\
    \x20versa,\x20then\x20that\x20output\n\x20will\x20be\x20omitted\x20from\
    \x20the\x20list.\x20The\x20server\x20is\x20free\x20to\x20arrange\x20the\
    \x20output\n\x20list\x20as\x20desired;\x20clients\x20MUST\x20NOT\x20assu\
    me\x20that\x20the\x20output\x20list\x20is\x20sorted.\n\n\r\n\x05\x04\x04\
    \x02\0\x04\x12\x04\xa7\x01\x02\n\n\r\n\x05\x04\x04\x02\0\x06\x12\x04\xa7\
    \x01\x0b\x15\n\r\n\x05\x04\x04\x02\0\x01\x12\x04\xa7\x01\x16\"\n\r\n\x05\
    \x04\x04\x02\0\x03\x12\x04\xa7\x01%&\n\xfe\x0b\n\x04\x04\x04\x02\x01\x12\
    \x04\xe3\x01\x022\x1a\xef\x0b\x20The\x20output\x20directories\x20of\x20t\
    he\x20action.\x20For\x20each\x20output\x20directory\x20requested\n\x20in\
    \x20the\x20`output_directories`\x20field\x20of\x20the\x20Action,\x20if\
    \x20the\x20corresponding\n\x20directory\x20existed\x20after\x20the\x20ac\
    tion\x20completed,\x20a\x20single\x20entry\x20will\x20be\n\x20present\
    \x20in\x20the\x20output\x20list,\x20which\x20will\x20contain\x20the\x20d\
    igest\x20of\n\x20a\x20[Tree][google.devtools.remoteexecution.v1test.Tree\
    ]\x20message\x20containing\n\x20the\x20directory\x20tree,\x20and\x20the\
    \x20path\x20equal\x20exactly\x20to\x20the\x20corresponding\x20Action\n\
    \x20output_directories\x20member.\n\x20As\x20an\x20example,\x20suppose\
    \x20the\x20Action\x20had\x20an\x20output\x20directory\x20`a/b/dir`\x20an\
    d\x20the\n\x20execution\x20produced\x20the\x20following\x20contents\x20i\
    n\x20`a/b/dir`:\x20a\x20file\x20named\x20`bar`\n\x20and\x20a\x20director\
    y\x20named\x20`foo`\x20with\x20an\x20executable\x20file\x20named\x20`baz\
    `.\x20Then,\n\x20output_directory\x20will\x20contain\x20(hashes\x20short\
    ened\x20for\x20readability):\n\n\x20```json\n\x20//\x20OutputDirectory\
    \x20proto:\n\x20{\n\x20\x20\x20path:\x20\"a/b/dir\"\n\x20\x20\x20tree_di\
    gest:\x20{\n\x20\x20\x20\x20\x20hash:\x20\"4a73bc9d03...\",\n\x20\x20\
    \x20\x20\x20size:\x2055\n\x20\x20\x20}\n\x20}\n\x20//\x20Tree\x20proto\
    \x20with\x20hash\x20\"4a73bc9d03...\"\x20and\x20size\x2055:\n\x20{\n\x20\
    \x20\x20root:\x20{\n\x20\x20\x20\x20\x20files:\x20[\n\x20\x20\x20\x20\
    \x20\x20\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20name:\x20\"bar\",\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20digest:\x20{\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20hash:\x20\"4a73bc9d03...\",\n\x20\x20\x20\x20\
    \x20\x20\x20\x20\x20\x20\x20size:\x2065534\n\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20}\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\x20\x20],\n\x20\
    \x20\x20\x20\x20directories:\x20[\n\x20\x20\x20\x20\x20\x20\x20{\n\x20\
    \x20\x20\x20\x20\x20\x20\x20\x20name:\x20\"foo\",\n\x20\x20\x20\x20\x20\
    \x20\x20\x20\x20digest:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20hash:\x20\"4cf2eda940...\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20\x20size:\x2043\n\x20\x20\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\
    \x20\x20\x20\x20}\n\x20\x20\x20\x20\x20]\n\x20\x20\x20}\n\x20\x20\x20chi\
    ldren\x20:\x20{\n\x20\x20\x20\x20\x20//\x20(Directory\x20proto\x20with\
    \x20hash\x20\"4cf2eda940...\"\x20and\x20size\x2043)\n\x20\x20\x20\x20\
    \x20files:\x20[\n\x20\x20\x20\x20\x20\x20\x20{\n\x20\x20\x20\x20\x20\x20\
    \x20\x20\x20name:\x20\"baz\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20diges\
    t:\x20{\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20hash:\x20\"b2c94107\
    3e...\",\n\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20size:\x201294,\n\
    \x20\x20\x20\x20\x20\x20\x20\x20\x20},\n\x20\x20\x20\x20\x20\x20\x20\x20\
    \x20is_executable:\x20true\n\x20\x20\x20\x20\x20\x20\x20}\n\x20\x20\x20\
    \x20\x20]\n\x20\x20\x20}\n\x20}\n\x20```\n\n\r\n\x05\x04\x04\x02\x01\x04\
    \x12\x04\xe3\x01\x02\n\n\r\n\x05\x04\x04\x02\x01\x06\x12\x04\xe3\x01\x0b\
    \x1a\n\r\n\x05\x04\x04\x02\x01\x01\x12\x04\xe3\x01\x1b-\n\r\n\x05\x04\
    \x04\x02\x01\x03\x12\x04\xe3\x0101\n-\n\x04\x04\x04\x02\x02\x12\x04\xe6\
    \x01\x02\x16\x1a\x1f\x20The\x20exit\x20code\x20of\x20the\x20command.\n\n\
    \x0f\n\x05\x04\x04\x02\x02\x04\x12\x06\xe6\x01\x02\xe3\x012\n\r\n\x05\
    \x04\x04\x02\x02\x05\x12\x04\xe6\x01\x02\x07\n\r\n\x05\x04\x04\x02\x02\
    \x01\x12\x04\xe6\x01\x08\x11\n\r\n\x05\x04\x04\x02\x02\x03\x12\x04\xe6\
    \x01\x14\x15\n\x96\x03\n\x04\x04\x04\x02\x03\x12\x04\xee\x01\x02\x17\x1a\
    \x87\x03\x20The\x20standard\x20output\x20buffer\x20of\x20the\x20action.\
    \x20The\x20server\x20will\x20determine,\x20based\n\x20on\x20the\x20size\
    \x20of\x20the\x20buffer,\x20whether\x20to\x20return\x20it\x20in\x20raw\
    \x20form\x20or\x20to\x20return\n\x20a\x20digest\x20in\x20`stdout_digest`\
    \x20that\x20points\x20to\x20the\x20buffer.\x20If\x20neither\x20is\x20set\
    ,\n\x20then\x20the\x20buffer\x20is\x20empty.\x20The\x20client\x20SHOULD\
    \x20NOT\x20assume\x20it\x20will\x20get\x20one\x20of\n\x20the\x20raw\x20b\
    uffer\x20or\x20a\x20digest\x20on\x20any\x20given\x20request\x20and\x20sh\
    ould\x20be\x20prepared\x20to\n\x20handle\x20either.\n\n\x0f\n\x05\x04\
    \x04\x02\x03\x04\x12\x06\xee\x01\x02\xe6\x01\x16\n\r\n\x05\x04\x04\x02\
    \x03\x05\x12\x04\xee\x01\x02\x07\n\r\n\x05\x04\x04\x02\x03\x01\x12\x04\
    \xee\x01\x08\x12\n\r\n\x05\x04\x04\x02\x03\x03\x12\x04\xee\x01\x15\x16\n\
    \x82\x02\n\x04\x04\x04\x02\x04\x12\x04\xf4\x01\x02\x1b\x1a\xf3\x01\x20Th\
    e\x20digest\x20for\x20a\x20blob\x20containing\x20the\x20standard\x20outp\
    ut\x20of\x20the\x20action,\x20which\n\x20can\x20be\x20retrieved\x20from\
    \x20the\n\x20[ContentAddressableStorage][google.devtools.remoteexecution\
    .v1test.ContentAddressableStorage].\n\x20See\x20`stdout_raw`\x20for\x20w\
    hen\x20this\x20will\x20be\x20set.\n\n\x0f\n\x05\x04\x04\x02\x04\x04\x12\
    \x06\xf4\x01\x02\xee\x01\x17\n\r\n\x05\x04\x04\x02\x04\x06\x12\x04\xf4\
    \x01\x02\x08\n\r\n\x05\x04\x04\x02\x04\x01\x12\x04\xf4\x01\t\x16\n\r\n\
    \x05\x04\x04\x02\x04\x03\x12\x04\xf4\x01\x19\x1a\n\x95\x03\n\x04\x04\x04\
    \x02\x05\x12\x04\xfc\x01\x02\x17\x1a\x86\x03\x20The\x20standard\x20error\
    \x20buffer\x20of\x20the\x20action.\x20The\x20server\x20will\x20determine\
    ,\x20based\n\x20on\x20the\x20size\x20of\x20the\x20buffer,\x20whether\x20\
    to\x20return\x20it\x20in\x20raw\x20form\x20or\x20to\x20return\n\x20a\x20\
    digest\x20in\x20`stderr_digest`\x20that\x20points\x20to\x20the\x20buffer\
    .\x20If\x20neither\x20is\x20set,\n\x20then\x20the\x20buffer\x20is\x20emp\
    ty.\x20The\x20client\x20SHOULD\x20NOT\x20assume\x20it\x20will\x20get\x20\
    one\x20of\n\x20the\x20raw\x20buffer\x20or\x20a\x20digest\x20on\x20any\
    \x20given\x20request\x20and\x20should\x20be\x20prepared\x20to\n\x20handl\
    e\x20either.\n\n\x0f\n\x05\x04\x04\x02\x05\x04\x12\x06\xfc\x01\x02\xf4\
    \x01\x1b\n\r\n\x05\x04\x04\x02\x05\x05\x12\x04\xfc\x01\x02\x07\n\r\n\x05\
    \x04\x04\x02\x05\x01\x12\x04\xfc\x01\x08\x12\n\r\n\x05\x04\x04\x02\x05\
    \x03\x12\x04\xfc\x01\x15\x16\n\x81\x02\n\x04\x04\x04\x02\x06\x12\x04\x82\
    \x02\x02\x1b\x1a\xf2\x01\x20The\x20digest\x20for\x20a\x20blob\x20contain\
    ing\x20the\x20standard\x20error\x20of\x20the\x20action,\x20which\n\x20ca\
    n\x20be\x20retrieved\x20from\x20the\n\x20[ContentAddressableStorage][goo\
    gle.devtools.remoteexecution.v1test.ContentAddressableStorage].\n\x20See\
    \x20`stderr_raw`\x20for\x20when\x20this\x20will\x20be\x20set.\n\n\x0f\n\
    \x05\x04\x04\x02\x06\x04\x12\x06\x82\x02\x02\xfc\x01\x17\n\r\n\x05\x04\
    \x04\x02\x06\x06\x12\x04\x82\x02\x02\x08\n\r\n\x05\x04\x04\x02\x06\x01\
    \x12\x04\x82\x02\t\x16\n\r\n\x05\x04\x04\x02\x06\x03\x12\x04\x82\x02\x19\
    \x1a\n\xc6\x02\n\x02\x04\x05\x12\x06\x8b\x02\0\xa2\x02\x01\x1a\xb7\x02\
    \x20An\x20`OutputFile`\x20is\x20similar\x20to\x20a\n\x20[FileNode][googl\
    e.devtools.remoteexecution.v1test.FileNode],\x20but\x20it\x20is\n\x20tai\
    lored\x20for\x20output\x20as\x20part\x20of\x20an\x20`ActionResult`.\x20I\
    t\x20allows\x20a\x20full\x20file\x20path\n\x20rather\x20than\x20only\x20\
    a\x20name,\x20and\x20allows\x20the\x20server\x20to\x20include\x20content\
    \x20inline.\n\n\x20`OutputFile`\x20is\x20binary-compatible\x20with\x20`F\
    ileNode`.\n\n\x0b\n\x03\x04\x05\x01\x12\x04\x8b\x02\x08\x12\n\xda\x01\n\
    \x04\x04\x05\x02\0\x12\x04\x8f\x02\x02\x12\x1a\xcb\x01\x20The\x20full\
    \x20path\x20of\x20the\x20file\x20relative\x20to\x20the\x20input\x20root,\
    \x20including\x20the\n\x20filename.\x20The\x20path\x20separator\x20is\
    \x20a\x20forward\x20slash\x20`/`.\x20Since\x20this\x20is\x20a\n\x20relat\
    ive\x20path,\x20it\x20MUST\x20NOT\x20begin\x20with\x20a\x20leading\x20fo\
    rward\x20slash.\n\n\x0f\n\x05\x04\x05\x02\0\x04\x12\x06\x8f\x02\x02\x8b\
    \x02\x14\n\r\n\x05\x04\x05\x02\0\x05\x12\x04\x8f\x02\x02\x08\n\r\n\x05\
    \x04\x05\x02\0\x01\x12\x04\x8f\x02\t\r\n\r\n\x05\x04\x05\x02\0\x03\x12\
    \x04\x8f\x02\x10\x11\n1\n\x04\x04\x05\x02\x01\x12\x04\x92\x02\x02\x14\
    \x1a#\x20The\x20digest\x20of\x20the\x20file's\x20content.\n\n\x0f\n\x05\
    \x04\x05\x02\x01\x04\x12\x06\x92\x02\x02\x8f\x02\x12\n\r\n\x05\x04\x05\
    \x02\x01\x06\x12\x04\x92\x02\x02\x08\n\r\n\x05\x04\x05\x02\x01\x01\x12\
    \x04\x92\x02\t\x0f\n\r\n\x05\x04\x05\x02\x01\x03\x12\x04\x92\x02\x12\x13\
    \n\xbd\x03\n\x04\x04\x05\x02\x02\x12\x04\x9e\x02\x02\x14\x1a\xae\x03\x20\
    The\x20raw\x20content\x20of\x20the\x20file.\n\n\x20This\x20field\x20may\
    \x20be\x20used\x20by\x20the\x20server\x20to\x20provide\x20the\x20content\
    \x20of\x20a\x20file\n\x20inline\x20in\x20an\n\x20[ActionResult][google.d\
    evtools.remoteexecution.v1test.ActionResult]\x20and\n\x20avoid\x20requir\
    ing\x20that\x20the\x20client\x20make\x20a\x20separate\x20call\x20to\n\
    \x20[ContentAddressableStorage.GetBlob]\x20to\x20retrieve\x20it.\n\n\x20\
    The\x20client\x20SHOULD\x20NOT\x20assume\x20that\x20it\x20will\x20get\
    \x20raw\x20content\x20with\x20any\x20request,\n\x20and\x20always\x20be\
    \x20prepared\x20to\x20retrieve\x20it\x20via\x20`digest`.\n\n\x0f\n\x05\
    \x04\x05\x02\x02\x04\x12\x06\x9e\x02\x02\x92\x02\x14\n\r\n\x05\x04\x05\
    \x02\x02\x05\x12\x04\x9e\x02\x02\x07\n\r\n\x05\x04\x05\x02\x02\x01\x12\
    \x04\x9e\x02\x08\x0f\n\r\n\x05\x04\x05\x02\x02\x03\x12\x04\x9e\x02\x12\
    \x13\n<\n\x04\x04\x05\x02\x03\x12\x04\xa1\x02\x02\x19\x1a.\x20True\x20if\
    \x20file\x20is\x20executable,\x20false\x20otherwise.\n\n\x0f\n\x05\x04\
    \x05\x02\x03\x04\x12\x06\xa1\x02\x02\x9e\x02\x14\n\r\n\x05\x04\x05\x02\
    \x03\x05\x12\x04\xa1\x02\x02\x06\n\r\n\x05\x04\x05\x02\x03\x01\x12\x04\
    \xa1\x02\x07\x14\n\r\n\x05\x04\x05\x02\x03\x03\x12\x04\xa1\x02\x17\x18\n\
    \x91\x01\n\x02\x04\x06\x12\x06\xa7\x02\0\xb5\x02\x01\x1a\x82\x01\x20An\
    \x20`OutputDirectory`\x20is\x20the\x20output\x20in\x20an\x20`ActionResul\
    t`\x20corresponding\x20to\x20a\n\x20directory's\x20full\x20contents\x20r\
    ather\x20than\x20a\x20single\x20file.\n\n\x0b\n\x03\x04\x06\x01\x12\x04\
    \xa7\x02\x08\x17\n\x9f\x02\n\x04\x04\x06\x02\0\x12\x04\xac\x02\x02\x12\
    \x1a\x90\x02\x20The\x20full\x20path\x20of\x20the\x20directory\x20relativ\
    e\x20to\x20the\x20working\x20directory.\x20The\x20path\n\x20separator\
    \x20is\x20a\x20forward\x20slash\x20`/`.\x20Since\x20this\x20is\x20a\x20r\
    elative\x20path,\x20it\x20MUST\n\x20NOT\x20begin\x20with\x20a\x20leading\
    \x20forward\x20slash.\x20The\x20empty\x20string\x20value\x20is\x20allowe\
    d,\n\x20and\x20it\x20denotes\x20the\x20entire\x20working\x20directory.\n\
    \n\x0f\n\x05\x04\x06\x02\0\x04\x12\x06\xac\x02\x02\xa7\x02\x19\n\r\n\x05\
    \x04\x06\x02\0\x05\x12\x04\xac\x02\x02\x08\n\r\n\x05\x04\x06\x02\0\x01\
    \x12\x04\xac\x02\t\r\n\r\n\x05\x04\x06\x02\0\x03\x12\x04\xac\x02\x10\x11\
    \nR\n\x04\x04\x06\x02\x01\x12\x04\xaf\x02\x02\x14\x1aD\x20DEPRECATED:\
    \x20This\x20field\x20is\x20deprecated\x20and\x20should\x20no\x20longer\
    \x20be\x20used.\n\n\x0f\n\x05\x04\x06\x02\x01\x04\x12\x06\xaf\x02\x02\
    \xac\x02\x12\n\r\n\x05\x04\x06\x02\x01\x06\x12\x04\xaf\x02\x02\x08\n\r\n\
    \x05\x04\x06\x02\x01\x01\x12\x04\xaf\x02\t\x0f\n\r\n\x05\x04\x06\x02\x01\
    \x03\x12\x04\xaf\x02\x12\x13\n\x8a\x01\n\x04\x04\x06\x02\x02\x12\x04\xb4\
    \x02\x02\x19\x1a|\x20The\x20digest\x20of\x20the\x20encoded\n\x20[Tree][g\
    oogle.devtools.remoteexecution.v1test.Tree]\x20proto\x20containing\x20th\
    e\n\x20directory's\x20contents.\n\n\x0f\n\x05\x04\x06\x02\x02\x04\x12\
    \x06\xb4\x02\x02\xaf\x02\x14\n\r\n\x05\x04\x06\x02\x02\x06\x12\x04\xb4\
    \x02\x02\x08\n\r\n\x05\x04\x06\x02\x02\x01\x12\x04\xb4\x02\t\x14\n\r\n\
    \x05\x04\x06\x02\x02\x03\x12\x04\xb4\x02\x17\x18b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
